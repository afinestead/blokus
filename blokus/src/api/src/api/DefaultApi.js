/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessToken from '../model/AccessToken';
import BodyPlacePiecePlacePut from '../model/BodyPlacePiecePlacePut';
import GameConfig from '../model/GameConfig';
import GameID from '../model/GameID';
import GameState from '../model/GameState';
import HTTPValidationError from '../model/HTTPValidationError';
import Message from '../model/Message';
import PlayerProfile from '../model/PlayerProfile';


export default class DefaultApi {

    
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    createNewGameGameCreatePostWithHttpInfo(gameConfig) {
      let postBody = gameConfig;
      // verify the required parameter 'gameConfig' is set
      if (gameConfig === undefined || gameConfig === null) {
        throw new Error("Missing the required parameter 'gameConfig' when calling createNewGameGameCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameID;
      return this.apiClient.callApi(
        '/game/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    createNewGameGameCreatePost(gameConfig) {
      return this.createNewGameGameCreatePostWithHttpInfo(gameConfig)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    gameStateStateGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_query': opts['tokenQuery']
      };
      let headerParams = {
        'token-header': opts['tokenHeader']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameState;
      return this.apiClient.callApi(
        '/state', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    gameStateStateGet(opts) {
      return this.gameStateStateGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    getCurrentPlayerPlayerGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_query': opts['tokenQuery']
      };
      let headerParams = {
        'token-header': opts['tokenHeader']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PlayerProfile;
      return this.apiClient.callApi(
        '/player', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    getCurrentPlayerPlayerGet(opts) {
      return this.getCurrentPlayerPlayerGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    joinGameGameGameIdJoinPostWithHttpInfo(gameId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling joinGameGameGameIdJoinPost");
      }

      let pathParams = {
        'game_id': gameId
      };
      let queryParams = {
        'player_name': opts['playerName'],
        'color': opts['color']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessToken;
      return this.apiClient.callApi(
        '/game/{game_id}/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    joinGameGameGameIdJoinPost(gameId, opts) {
      return this.joinGameGameGameIdJoinPostWithHttpInfo(gameId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    placePiecePlacePutWithHttpInfo(bodyPlacePiecePlacePut, opts) {
      opts = opts || {};
      let postBody = bodyPlacePiecePlacePut;
      // verify the required parameter 'bodyPlacePiecePlacePut' is set
      if (bodyPlacePiecePlacePut === undefined || bodyPlacePiecePlacePut === null) {
        throw new Error("Missing the required parameter 'bodyPlacePiecePlacePut' when calling placePiecePlacePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'token_query': opts['tokenQuery']
      };
      let headerParams = {
        'token-header': opts['tokenHeader']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/place', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    placePiecePlacePut(bodyPlacePiecePlacePut, opts) {
      return this.placePiecePlacePutWithHttpInfo(bodyPlacePiecePlacePut, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
    whoseTurnTurnGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token_query': opts['tokenQuery']
      };
      let headerParams = {
        'token-header': opts['tokenHeader']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/turn', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }
    whoseTurnTurnGet(opts) {
      return this.whoseTurnTurnGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
